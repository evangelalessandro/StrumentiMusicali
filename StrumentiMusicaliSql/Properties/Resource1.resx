<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddDeviceBackup" xml:space="preserve">
    <value>declare @name nvarchar(50) =@p0  
declare @pathFile nvarchar(50)  
select @pathFile = @p1 + 'Negozio.bak'  
if exists (select * from sys.backup_devices where name = @name)  
begin   
  EXEC sp_dropdevice @name;  
end   
   
exec sp_addumpdevice N'disk', @name, @pathFile</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="Error_24" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Error_24.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="IndexOptimize" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\script\indexoptimize.sql;System.String, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089;utf-8</value>
  </data>
  <data name="Info_24" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Info_24.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SpBackup" xml:space="preserve">
    <value>create  procedure dbo.sp_Backup
as

SET XACT_ABORT ON
declare @name nvarchar(50) ='BACKUP_NegozioSM'

 


BACKUP DATABASE [NegozioSM] TO [BACKUP_NegozioSM] WITH  INIT ,  NOUNLOAD ,  
NAME = N'Backup di NegozioSM',  SKIP ,  STATS = 10,COMPRESSION,  NOFORMAT 

DECLARE @i INT
select @i = position from msdb..backupset 
where database_name='NegozioSM'and type!='F' 
and backup_set_id=(select max(backup_set_id) from msdb..backupset where database_name='NegozioSM')
RESTORE VERIFYONLY FROM  [BACKUP_NegozioSM]  WITH FILE = @i
</value>
  </data>
  <data name="SpCheckExists" xml:space="preserve">
    <value>IF EXISTS (SELECT * FROM sys.objects 
WHERE object_id = OBJECT_ID(N'[dbo].[sp_Backup]') AND type in (N'P', N'PC'))
  select 1
else 
  select 0</value>
  </data>
  <data name="SP_NG_SottoScorta" xml:space="preserve">
    <value>CREATE OR ALTER PROCEDURE [dbo].[NG_SottoScorta_SelectDati]
(
                 @date date --data riferimento
                 , @idUtente int = -1
)
AS


  DROP TABLE IF EXISTS #tmpArt

  SELECT ID AS ArticoloID,
  Titolo AS ArtDescr,
  SottoScorta,
  PeriodoSottoScortaInizio,
  PeriodoSottoScortaFine,
  ISNULL(TOT, 0) AS Giac
  INTO #tmpArt
  FROM Articoli
       LEFT JOIN
       (SELECT ArticoloID AS ArtGiac, SUM(Qta) TOT
     FROM Magazzino
     GROUP BY ArticoloID) ArtG
       ON ArtGiac = ID
  WHERE SottoScorta &gt; 0

  DROP TABLE IF EXISTS #tmpListiniMin
  SELECT ArticoloID,
  MIN(LPF_Prezzo) PrezzoMinimo
  INTO #tmpListiniMin
  FROM #tmpArt
       LEFT JOIN
       DAT_ListinoPrezziFornitori
       ON ArticoloID = LPF_ArticoloID
  GROUP BY ArticoloID


  SELECT DAT_ListinoPrezziFornitori.ID AS ID,
  #tmpArt.ArticoloID,
  ArtDescr AS Articolo,
  LPF_Prezzo Prezzo,
  LPF_CodiceArticoloFornitore AS CodiceArticoloFornitore,
  LPF_QTA_MINIMA AS QtaMinimaOrdine,
  Giac AS QtaGiacenza,
  SottoScorta,
  b.PRE_QTA_DA_ORDINARE AS QtaDaOrdinare,
  CASE
       WHEN f.RagioneSociale &gt; '' THEN f.RagioneSociale
       ELSE ISNULL(f.Cognome, '') + ' ' + ISNULL(f.Nome, '')
  END + ' - ' + CASE
                    WHEN ISNULL(PIVA, '') &gt; '' THEN ISNULL(PIVA, '')
                    ELSE ISNULL(CodiceFiscale, '')
               END AS Fornitore,
  ISNULL(QtaOrdine,0) AS QtaInOrdine
  FROM #tmpArt

       INNER JOIN
       #tmpListiniMin
       ON #tmpArt.ArticoloID = #tmpListiniMin.ArticoloID
       INNER JOIN
       DAT_ListinoPrezziFornitori
       ON PrezzoMinimo = LPF_Prezzo AND
         LPF_ArticoloID = #tmpArt.ArticoloID
       INNER JOIN
       Clienti f
       ON LPF_FornitoreID = f.ID
       INNER JOIN
       DAT_PreordiniAcquisto b
       ON b.PRE_ARTICOLOID = #tmpArt.ArticoloID AND
         b.PRE_FORNITOREID = LPF_FornitoreID
      LEFT JOIN (SELECT r.ArticoloID,f.ClienteFornitoreID,SUM(r.Qta) QtaOrdine
      FROM 
      Fatture f INNER JOIN 
      FattureRighe r ON r.FatturaID=f.ID AND f.ChiusaSpedita=0
      AND TipoDocumento=5
      GROUP BY r.ArticoloID,f.ClienteFornitoreID) fatt 
      ON fatt.ArticoloID= #tmpArt.ArticoloID
        AND LPF_FornitoreID=fatt.ClienteFornitoreID
GO</value>
  </data>
  <data name="Warning_24" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\Warning_24.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
</root>